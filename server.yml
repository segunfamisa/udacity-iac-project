Description: >
  CloudFormation script to set up the security & server config for Udacity Udagram project.

Parameters:
  EnvironmentName:
    Description: An environment name to be used as prefixes/suffices to resources
    Type: String

  AmiId:
    Description: AMI ID for the server instance
    Type: String

  UdagramSourceArn:
    Description: S3 ARN for the source code of Udagram
    Type: String
    
Resources:

  UdacityS3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      RoleName: !Sub ${EnvironmentName}-S3Role

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Action:
              - s3:Get*
              - s3:List*
            Resource:
              - !Ref UdagramSourceArn
              - !Sub "${UdagramSourceArn}/*"
      Roles:
        - Ref: UdacityS3ReadOnlyEC2
  
  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to allow http traffic for load balancer
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCID"
          
  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to allow http traffic for the web app
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCID"

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udacity-demo-1/udacity.zip .
          unzip -o udacity.zip
      ImageId: !Ref AmiId
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10
            
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: 
            !Sub "${EnvironmentName}-PRI-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs: 
        - Ref: WebAppLoadBalancerTargetGroup

  WebAppLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref LoadBalancerSecGroup
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"

  WebAppLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebAppLoadBalancerTargetGroup
      LoadBalancerArn: !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
  
  WebAppLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref WebAppLoadBalancerTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'WebAppLoadBalancerListener'
      Priority: 1

Outputs:

  LoadBalancerDNSName:
    Description: A URL link to the load balancer entry point
    Value: !Join ["", ["http://", !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-DNSName
